/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
    id 'maven-publish'
}

jar {
    manifest {
        attributes 'Specification-Title':'WorldTime - Eng.Software'
        attributes 'Specification-Version':'1.0'
        attributes 'Specification-Vendor':'ESTG'
        attributes 'Implementation-Title':'world.WorldTime'
        attributes 'Implementation-Version':'build01'
        attributes 'Implementation-Vendor': 'ESTG'
        attributes 'Main-Class':'worldTime.worldTime'
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.0.1-jre'

    //biblioteca joda-time
    implementation 'joda-time:joda-time:2.11.2'
}

application {
    // Define the main class for the application.
    mainClass = 'worldTime.worldTime'
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'org.estg.test'
            artifactId = 'library'
            version = '1.0'
        }
    }
    /*
    repositories{
        maven {
            credentials {
                username = "$usr"
                password = "$pwd"
            }
            url = layout.buildDirectory.dir('repo')
        }
    } */
}

jar {
    manifest {
        attributes 'Main-Class': 'worldTime.worldTime'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it: zipTree(it) }
    }
    duplicatesStrategy = duplicatesStrategy.INCLUDE
}

task zip(type: Zip, group:"Archive", description: "Archives sources in a zip file") {
    destinationDirectory = file(".")// default build/distribuitions
    archiveFileName = "backup.zip"
    from "src"
}

build.finalizedBy zip,javadoc, publish
